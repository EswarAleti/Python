reverse_number_in_list(number_list:list)-> list


This function will be given a list of numbers your job is to reverse all the numbers in the list and return a list with the reversed numbers. If a number ends with 0 you need to remove all the trailing zeros before reversing the number. An example of reversing numbers with trailing zeros: 10 -> 1, 590 -> 95. None of the numbers in the number_list will be less than 1.

Example:

number_list = [13, 45, 690, 57]

output = [31, 54, 96, 75]

tails_same(number_list:list) -> bool

This function should return true if the value at the beginning and the end of the list are equal. False otherwise.

Example:

number_list = [1, 239, 949, 0, 84, 0, 1]

output: True

number_list = [1, 239, 949, 0, 84, 0, 13]

output: False

remove_char(str_list:list, char:str) -> list

This function will be given a list of strings and a character. You must remove all occurrences of the character from each string in the list. The function should return the list of strings with the character removed.

Example:

str_list = ['adndj', 'adjdlaa', 'aa', 'djoe']

char: a

output = ['dndj', 'djdl', '', 'djoe']

return_growing_num_list(max:int) -> list

This function will be given a single number, it should return a list of strings of numbers. Each string in the list will only contain a single number repeated an arbitrary amount of times. The number each string will contain will be equal to the current string's index+1. The number in the string should be repeated the same number of times as the string's index+1. Each number in the string should be separated by a space. This list should stop when its size equals the max number specified.

Example:

max = 3

output = ['1', '2 2', '3 3 3']

max = 4

output = ['1', '2 2', '3 3 3', '4 4 4 4']